from array import *
import numpy as np
M =np.genfromtxt('input.csv',delimiter=',',dtype=int)	   # import input from file and store value in master "M" matrix/array
f=open('output.txt','w')                                   # store results in this file
unknown = []                                               # declare array to store all possible values that can replace 0

def findit():       							                 # this function looks for values of each submatrix using process of elimation
        for xx in range(0,len( np.argwhere(Msub == 0))):                                 # iterate over all values where there are 0s in each 3x3 array
            row = M_indices[xx,0]
            col = M_indices[xx,1]
            unknown = [ xs for xs in range(1,10) if xs not in Msub]                      # generates all possible values 1-9 for each array
            remain = [xs for xs in unknown if xs not in M[row,:] and xs not in M[:,col]] # filters out the array per 0 value
            if len(remain) == 1:
                M[row,col]=remain[0]

while len(np.argwhere(M==0)) > 0:		  					  # this loop will iterate to find more values as M is updated 
 before = len(np.argwhere(M==0))          						  # controls the while loop, counts zer0s
 for i in range(0,9,3):      									
    for j in range(0,9,3):
        Msub = M[i:(i+3),j:(j+3)]							   # Msub = the sub array currently worked on
        M_indices = [i,j] + np.argwhere(Msub == 0)			 	           # M_indices=location of the sub array's 0 values in M array
        findit()									   # first use the process of elimination 
        if len( np.argwhere(Msub==0)) == 2:						   # if 2 values/subarray missing and same # of possibilities, i
            findit()									   # iterate again
        if len(np.argwhere(Msub==0)) == 1:                                                 # if 1 possibility remaining, search for the missing 1-9 value
            last = [xt for xt in range(1,10) if not xt in Msub ]
            M_indices = [i,j] + np.argwhere(Msub == 0) 
            row = M_indices[0,0]
            col = M_indices[0,1]
            M[row, col] = last[0]
 after = len(np.argwhere(M==0))      							   # exit for the while loop when # of 0s in M does not decrease
 if before == after:
     break

if len(np.argwhere(M==0)) == 0:
	print "Sudoku puzzle solved"
else:
	print "Puzzle not resolved :( "
print M
f.write(np.array2string(M, separator=', '))

